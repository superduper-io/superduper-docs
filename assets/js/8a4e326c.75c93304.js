"use strict";(self.webpackChunknewdocs=self.webpackChunknewdocs||[]).push([[8985],{4592:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var s=t(4848),r=t(8453);const a={},i="Real time, database integrated agents, with integrated actions",o={id:"tutorials/agent_tutorial",title:"Real time, database integrated agents, with integrated actions",description:"AI agents are relevant for a huge range of computer bound knowledge work, in which the individual component steps can be accessed programmatically. The range of possible agents is limited only by the tools we have to connect data, AI models in a useful environment. A very powerful-scuh environment is superduper.",source:"@site/docs/tutorials/agent_tutorial.md",sourceDirName:"tutorials",slug:"/tutorials/agent_tutorial",permalink:"/docs/next/tutorials/agent_tutorial",draft:!1,unlisted:!1,editUrl:"https://github.com/superduper-io/superduper/edit/main/docs/docs/tutorials/agent_tutorial.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Basic RAG tutorial",permalink:"/docs/next/tutorials/rag"},next:{title:"Training and Managing MNIST Predictions with superduper",permalink:"/docs/next/tutorials/training"}},l={},c=[];function d(e){const n={a:"a",code:"code",h1:"h1",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"real-time-database-integrated-agents-with-integrated-actions",children:"Real time, database integrated agents, with integrated actions"}),"\n",(0,s.jsxs)(n.p,{children:["AI agents are relevant for a huge range of computer bound knowledge work, in which the individual component steps can be accessed programmatically. The range of possible agents is limited only by the tools we have to connect data, AI models in a useful environment. A very powerful-scuh environment is ",(0,s.jsx)(n.code,{children:"superduper"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["In particular, when knowledge work involves reacting to data in real time, and acting, making decisions, informing and inferring based on that data, then ",(0,s.jsx)(n.code,{children:"superduper"})," is exactly the right place to start."]}),"\n",(0,s.jsx)(n.p,{children:"This is show-cased in the following example:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["A ",(0,s.jsx)(n.code,{children:"superduper"}),' cron-job is created to search google for webpages relevant to a table of "people-of-interest".']}),"\n",(0,s.jsx)(n.li,{children:'When new data is detected either on google (real-time) or in the table of "people-of-interest" (real-time), then the store of web-pages is updated.'}),"\n",(0,s.jsx)(n.li,{children:"This store of web-pages is made searchable using vector-search."}),"\n",(0,s.jsxs)(n.li,{children:["An additional ",(0,s.jsx)(n.code,{children:"superduper"}),' component is created which monitors the store of web-pages and notifies each "person-of-interest" when a particular topic is found in the latest google searches.']}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"When considering this workflow, you will see that agents don't just need to be restricted to agent-chat, with inline actions and tool-choice."}),"\n",(0,s.jsxs)(n.p,{children:["Create a searchapi.io key ",(0,s.jsx)(n.a,{href:"https://www.searchapi.io/",children:"here"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"!pip install litellm\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"!pip superduper-framework\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import bs4\nimport os\nimport requests\nimport typing as t\n\n\nfrom superduper import CronJob\n\n\nclass Researcher(CronJob):\n    engine: str = 'google'\n\n    def search(self, query: str):\n        # the below logic is save on searchapi.io queries, if using the free trial\n        query = query.replace(' ', '+')\n        try:\n            with open(f'{query}.json', 'r') as f:\n                results = json.load(f)\n        except FileNotFoundError:\n            results = requests.get(\n                \"https://www.searchapi.io/api/v1/search\",\n                headers={\"Authorization\": f\"Bearer {os.environ['SEARCHAPI_API_KEY']}\"},\n                params={\"engine\": self.engine, \"q\": query},\n            ).json()['organic_results']\n            with open(f'{query}.json', 'w') as f:\n                json.dump(results, f)\n        return results\n\n    def download_page(self, url):\n        try:\n            content = requests.get(url).text\n        except Exception as e:\n            logging.warn(str(e))\n            logging.warn('skipping')\n            return ''\n        soup = bs4.BeautifulSoup(content)\n        return soup.get_text()\n\n    def run(self):\n\n        current_poi = self.db['PersonOfInterest'].execute()\n        it = 0\n        \n        for item in current_poi:\n            search_results = self.search(f'{item[\"name\"]} {item[\"description\"]}')\n            primary_id = self.db['Page'].primary_id.execute()\n            ids = set(self.db['Page'].ids())\n            \n            for result in search_results:\n\n                      \n                new_id = self.db.databackend.create_id(result['link'])\n                \n                if new_id in ids:\n                    continue\n                \n                page = self.download_page(result['link'])\n    \n                if len(page.split('\\n')) < 10:\n                    continue\n\n                self.db['Page'].insert([{'link': result['link'], 'txt': page, primary_id: new_id, 'source': item['_id']}])\n                it += 1\n\n        logging.info(f'Found {it} new entries')\n"})}),"\n",(0,s.jsxs)(n.p,{children:["To test, we'll use mongo-mock as a testing database. You can switch this to any database supported by ",(0,s.jsx)(n.code,{children:"superduper"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from superduper import superduper\n\ndb = superduper('mongomock://test_db')\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Datapoints and components in ",(0,s.jsx)(n.code,{children:"superduper"})," are dual to one another, via ",(0,s.jsx)(n.code,{children:"Base.dict()"}),". In the below example, we define\ndata-points which include key information about particular individuals and their contacts."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from superduper.base import Base\n\n\nclass PersonOfInterest(Base):\n    email: str\n    name: str\n    description: str\n"})}),"\n",(0,s.jsx)(n.p,{children:"We will insert a single person-of-interest:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"db.insert([\n    PersonOfInterest(email='duncan@superduper-company.com', name='Duncan Blythe', description='AI Researcher'),\n])\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"db['Page'].distinct('link')\n"})}),"\n",(0,s.jsx)(n.p,{children:"Now we will set-up the cron-job on the basis of our implementation above:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from superduper import Listener, Table\n\ntable = Table('Page', fields={'txt': 'str', 'link': 'str'})\n\nresearcher = Researcher('researcher', schedule='* * * * *', upstream=[table])\n"})}),"\n",(0,s.jsxs)(n.p,{children:["To run this cron-job, as usual, run ",(0,s.jsx)(n.code,{children:"db.apply"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"db.apply(researcher, force=True)\n"})}),"\n",(0,s.jsx)(n.p,{children:"To complement the research carried out by the cron-job, we'll set up a search index:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from litellm import embedding\nimport numpy\n\nfrom superduper import Model, Listener, VectorIndex\n\n\nclass Embedding(Model):\n    model: str = 'text-embedding-ada-002'\n\n    def predict(self, text):\n        response = embedding(model=self.model, input=[text])\n        return numpy.array(response.data[0]['embedding'])\n\n    def predict_batches(self, texts):\n        response = embedding(model=self.model, input=texts)\n        return [\n            numpy.array(r['embedding'])\n            for r in response.data\n        ]\n\n\nmyembedding = Embedding('embedding', datatype='vector[float:1265]')\n\nvector_index = VectorIndex(\n    'search_the_research',\n    indexing_listener=Listener(\n        'my_embedder',\n        model=myembedding,\n        select=db['Page'],\n        key='txt',\n    )\n)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Again, we call ",(0,s.jsx)(n.code,{children:"db.apply"}),". The first computations run in the main thread (initializing the computations). When additional data arrives,\nthe researcher thread (created by ",(0,s.jsx)(n.code,{children:"db.apply"}),") updates the vector-index."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"db.apply(vector_index, force=True)\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"db.show()\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In the following cells we create another component which listens for incoming data to the ",(0,s.jsx)(n.code,{children:"Page"})," table,\nand if the data fits a certain configurable description, will trigger a notification via a webhook."]}),"\n",(0,s.jsx)(n.p,{children:"The example uses a Zapier webhook, which is an easy way to set up notifications and a range of actions, including payments and more.\nThe choice of action is completely up to you!"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from superduper.components.cdc import CDC\nfrom superduper.components.component import trigger \n\nfrom litellm import completion\nimport typing as t\n\n\nclass Notification(CDC):\n    llm: str = 'gpt-3.5-turbo'\n    prompt: str\n    test: t.Callable\n    key: str\n\n    def _run(self, text, prompt):\n        response = completion(model=self.llm, messages=[{'content': prompt + '\\n' + text, 'role': 'user'}])\n        return response.choices[0].message.content\n\n    def check(self, text):\n        response = completion(model=self.llm, messages=[{'content': self.prompt + '\\n' + text, 'role': 'user'}])\n        return self.test(self._run(text, self.prompt))\n\n    def summarize(self, text):\n        return self._run(text, 'Summarize this text in 20 words or less; add no padding or preamble, just the summary')\n\n    def send_notification(self, summary, email):\n        self.db['NotificationMsg'].insert([{\n            'msg': f'sending message: {summary} to {email}'\n        }])\n        return\n        response = requests.post(\n            'https://hooks.zapier.com/hooks/catch/225673205/1234oq/',\n            data={'text': summary, 'email': email},\n        )\n\n    @trigger('apply', 'insert')\n    def notify(self, ids: t.List[str] | None = None):\n        if not ids:\n            data = self.db[self.cdc_table].execute()\n        else:\n            data = self.db[self.cdc_table].subset(ids)\n\n        messages = []\n        for r in data:\n            if self.check(r[self.key]):\n                summary = self.summarize(r[self.key])\n                email = self.db['PersonOfInterest'].get(primary_id=r['source'])['email']\n                messages.append({'summary': summary, 'email': email})\n\n        import pdb; pdb.set_trace()\n        for message in messages:\n            self.send_notification(**message)\n        return messages\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"notification = Notification(\n    'notification-3', \n    prompt='Tell me if this text concerns software engineering in some way (yes/no - lowercase); here is the text:\\n',\n    cdc_table='Page',\n    test=lambda x: x.lower().strip() == 'yes',\n    key='txt',\n    db=db,\n    upstream=[\n        Table('NotificationMsg', fields={'msg': 'str'})\n    ]\n)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["As before, since this notification is a change-data-capture component and has ",(0,s.jsx)(n.code,{children:"@trigger(..., 'insert')"}),",\nit will respond to incoming data in the researcher thread, as well as checking the existing data on first ",(0,s.jsx)(n.code,{children:"db.apply"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"db.insert([\n    PersonOfInterest(email='timo@superduper-company.com', name='Timo Hagenow', description='Tech. Entrepreneur')\n])\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import pandas\n\npandas.DataFrame(db['PersonOfInterest'].execute())\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"db.apply(notification, force=True)\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"db['NotificationMsg'].execute()\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"db['Page'].like({'txt': 'Hamburg Entrepreneur'}, vector_index='search_the_research', n=1).execute()\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"db.show('VectorIndex')\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"db['Page'].get()\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Are you happy with your setup? The whole setup can now be saved/ bundled as an ",(0,s.jsx)(n.code,{children:"Application"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from superduper import Application\n\napplication = Application(\n    'online_trend_notification',\n    components=[notification, vector_index, researcher],\n)\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"application.encode()\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"application.export('saved_app')\n"})}),"\n",(0,s.jsx)(n.p,{children:"The next time you do this, you can apply everything in one go, like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"db.apply(application)\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var s=t(6540);const r={},a=s.createContext(r);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);