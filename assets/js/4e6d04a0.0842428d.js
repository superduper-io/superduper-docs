"use strict";(self.webpackChunknewdocs=self.webpackChunknewdocs||[]).push([[6311],{992:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var r=t(4848),a=t(8453),s=t(1470),l=t(9365);const i={sidebar_label:"Transfer learning",filename:"transfer_learning.md"},o="Transfer learning",c={id:"templates/transfer_learning",title:"transfer_learning",description:"Connect to superduper",source:"@site/content/templates/transfer_learning.md",sourceDirName:"templates",slug:"/templates/transfer_learning",permalink:"/docs/templates/transfer_learning",draft:!1,unlisted:!1,editUrl:"https://github.com/superduper-io/superduper/edit/main/docs/content/templates/transfer_learning.md",tags:[],version:"current",frontMatter:{sidebar_label:"Transfer learning",filename:"transfer_learning.md"},sidebar:"tutorialSidebar",previous:{title:"Text Vector Search",permalink:"/docs/templates/text_vector_search"}},d={},u=[{value:"Connect to superduper",id:"connect-to-superduper",level:2},{value:"Get useful sample data",id:"get-useful-sample-data",level:2},{value:"Insert simple data",id:"insert-simple-data",level:2},{value:"Compute features",id:"compute-features",level:2},{value:"Choose features key from feature listener",id:"choose-features-key-from-feature-listener",level:2},{value:"Build and train classifier",id:"build-and-train-classifier",level:2}];function p(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"transfer-learning",children:"Transfer learning"}),"\n",(0,r.jsx)(n.h2,{id:"connect-to-superduper",children:"Connect to superduper"}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:'Note that this is only relevant if you are running superduper in development mode.\nOtherwise refer to "Configuring your production system".'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from superduper import superduper\n\ndb = superduper('mongomock:///test_db')\n"})}),"\n",(0,r.jsx)(n.h2,{id:"get-useful-sample-data",children:"Get useful sample data"}),"\n",(0,r.jsxs)(s.A,{children:[(0,r.jsx)(l.A,{value:"Text-Classification",label:"Text-Classification",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'!curl -O https://superduper-public-demo.s3.amazonaws.com/text_classification.json\nimport json\n\nwith open("text_classification.json", "r") as f:\n    data = json.load(f)\nnum_classes = 2        \n'})})}),(0,r.jsx)(l.A,{value:"Image-Classification",label:"Image-Classification",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"!curl -O https://superduper-public-demo.s3.amazonaws.com/images_classification.zip && unzip images_classification.zip\nimport json\nfrom PIL import Image\n\nwith open('images/images.json', 'r') as f:\n    data = json.load(f)\n\ndata = [{'x': Image.open(d['image_path']), 'y': d['label']} for d in data]\nnum_classes = 2        \n"})})})]}),"\n",(0,r.jsx)(n.p,{children:"After obtaining the data, we insert it into the database."}),"\n",(0,r.jsxs)(s.A,{children:[(0,r.jsx)(l.A,{value:"Text-Classification",label:"Text-Classification",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"datas = [{'txt': d['x'], 'label': d['y']} for d in data]        \n"})})}),(0,r.jsx)(l.A,{value:"Image-Classification",label:"Image-Classification",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"datas = [{'image': d['x'], 'label': d['y']} for d in data]        \n"})})})]}),"\n",(0,r.jsx)(n.h2,{id:"insert-simple-data",children:"Insert simple data"}),"\n",(0,r.jsx)(n.p,{children:"After turning on auto_schema, we can directly insert data, and superduper will automatically analyze the data type, and match the construction of the table and datatype."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from superduper import Document\n\ntable_or_collection = db['documents']\n\nids = db.execute(table_or_collection.insert([Document(data) for data in datas]))\nselect = table_or_collection.select()\n"})}),"\n",(0,r.jsx)(n.h2,{id:"compute-features",children:"Compute features"}),"\n",(0,r.jsxs)(s.A,{children:[(0,r.jsx)(l.A,{value:"Text",label:"Text",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'key = \'txt\'\nimport sentence_transformers\nfrom superduper import vector, Listener\nfrom superduper_sentence_transformers import SentenceTransformer\n\nsuperdupermodel = SentenceTransformer(\n    identifier="embedding",\n    object=sentence_transformers.SentenceTransformer("sentence-transformers/all-MiniLM-L6-v2"),\n    postprocess=lambda x: x.tolist(),\n)\n\njobs, listener = db.apply(\n    Listener(\n        model=superdupermodel,\n        select=select,\n        key=key,\n        identifier="features"\n    )\n)        \n'})})}),(0,r.jsx)(l.A,{value:"Image",label:"Image",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"key = 'image'\nimport torchvision.models as models\nfrom torchvision import transforms\nfrom superduper_torch import TorchModel\nfrom superduper import Listener\nfrom PIL import Image\n\nclass TorchVisionEmbedding:\n    def __init__(self):\n        # Load the pre-trained ResNet-18 model\n        self.resnet = models.resnet18(pretrained=True)\n        \n        # Set the model to evaluation mode\n        self.resnet.eval()\n        \n    def preprocess(self, image):\n        # Preprocess the image\n        preprocess = preprocess = transforms.Compose([\n            transforms.Resize(256),\n            transforms.CenterCrop(224),\n            transforms.ToTensor(),\n            transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n        ])\n        tensor_image = preprocess(image)\n        return tensor_image\n        \nmodel = TorchVisionEmbedding()\nsuperdupermodel = TorchModel(identifier='my-vision-model-torch', object=model.resnet, preprocess=model.preprocess, postprocess=lambda x: x.numpy().tolist())\n\njobs, listener = db.apply(\n    Listener(\n        model=superdupermodel,\n        select=select,\n        key=key,\n        identifier=\"features\"\n    )\n)        \n"})})})]}),"\n",(0,r.jsx)(n.h2,{id:"choose-features-key-from-feature-listener",children:"Choose features key from feature listener"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"input_key = listener.outputs\ntraining_select = select.outputs(listener.predict_id)\n"})}),"\n",(0,r.jsx)(n.p,{children:"We can find the calculated feature data from the database."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"feature = list(training_select.limit(1).execute())[0][input_key]\nfeature_size = len(feature)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"build-and-train-classifier",children:"Build and train classifier"}),"\n",(0,r.jsxs)(s.A,{children:[(0,r.jsx)(l.A,{value:"Scikit-Learn",label:"Scikit-Learn",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from superduper_sklearn import Estimator, SklearnTrainer\nfrom sklearn.svm import SVC\n\nmodel = Estimator(\n    identifier="my-model",\n    object=SVC(),\n    trainer=SklearnTrainer(\n        "my-trainer",\n        key=(input_key, "label"),\n        select=training_select,\n    ),\n)        \n'})})}),(0,r.jsx)(l.A,{value:"Torch",label:"Torch",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import torch\nfrom torch import nn\nfrom superduper_torch.model import TorchModel\nfrom superduper_torch.training import TorchTrainer\nfrom torch.nn.functional import cross_entropy\n\n\nclass SimpleModel(nn.Module):\n    def __init__(self, input_size=16, hidden_size=32, num_classes=3):\n        super(SimpleModel, self).__init__()\n        self.fc1 = nn.Linear(input_size, hidden_size)\n        self.relu = nn.ReLU()\n        self.fc2 = nn.Linear(hidden_size, num_classes)\n\n    def forward(self, x):\n        out = self.fc1(x)\n        out = self.relu(out)\n        out = self.fc2(out)\n        return out\n\npreprocess = lambda x: torch.tensor(x)\n\n# Postprocess function for the model output    \ndef postprocess(x):\n    return int(x.topk(1)[1].item())\n\ndef data_transform(features, label):\n    return torch.tensor(features), label\n\n# Create a Logistic Regression model\n# feature_length is the input feature size\nmodel = SimpleModel(feature_size, num_classes=num_classes)\nmodel = TorchModel(\n    identifier='my-model',\n    object=model,         \n    preprocess=preprocess,\n    postprocess=postprocess,\n    trainer=TorchTrainer(\n        key=(input_key, 'label'),\n        identifier='my_trainer',\n        objective=cross_entropy,\n        loader_kwargs={'batch_size': 10},\n        max_iterations=1000,\n        validation_interval=100,\n        select=select,\n        transform=data_transform,\n    ),\n)        \n"})})})]}),"\n",(0,r.jsx)(n.p,{children:"Define a validation for evaluating the effect after training."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from superduper import Dataset, Metric, Validation\n\ndef acc(x, y):\n    return sum([xx == yy for xx, yy in zip(x, y)]) / len(x)\n\n\naccuracy = Metric(identifier="acc", object=acc)\nvalidation = Validation(\n    "transfer_learning_performance",\n    key=(input_key, "label"),\n    datasets=[\n        Dataset(identifier="my-valid", select=training_select.add_fold(\'valid\'))\n    ],\n    metrics=[accuracy],\n)\nmodel.validation = validation\n'})}),"\n",(0,r.jsx)(n.p,{children:"If we execute the apply function, then the model will be added to the database, and because the model has a Trainer, it will perform training tasks."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"db.apply(model)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Get the training metrics"}),"\n",(0,r.jsxs)(s.A,{children:[(0,r.jsx)(l.A,{value:"Scikit-Learn",label:"Scikit-Learn",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Load the model from the database\nmodel = db.load('model', model.identifier)\nmodel.metric_values        \n"})})}),(0,r.jsx)(l.A,{value:"Torch",label:"Torch",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"!pip -q install matplotlib\nfrom matplotlib import pyplot as plt\n\n# Load the model from the database\nmodel = db.load('model', model.identifier)\n\n# Plot the accuracy values\nplt.plot(model.trainer.metric_values['my-valid/acc'])\nplt.show()        \n"})})})]})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},9365:(e,n,t)=>{t.d(n,{A:()=>l});t(6540);var r=t(870);const a={tabItem:"tabItem_Ymn6"};var s=t(4848);function l(e){let{children:n,hidden:t,className:l}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,r.A)(a.tabItem,l),hidden:t,children:n})}},1470:(e,n,t)=>{t.d(n,{A:()=>j});var r=t(6540),a=t(870),s=t(3104),l=t(6347),i=t(205),o=t(7485),c=t(1682),d=t(9466);function u(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:a}}=e;return{value:n,label:t,attributes:r,default:a}}))}(t);return function(e){const n=(0,c.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:t}=e;const a=(0,l.W6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,o.aZ)(s),(0,r.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(a.location.search);n.set(s,e),a.replace({...a.location,search:n.toString()})}),[s,a])]}function h(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,s=p(e),[l,o]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:s}))),[c,u]=f({queryString:t,groupId:a}),[h,b]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,s]=(0,d.Dv)(t);return[a,(0,r.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:a}),g=(()=>{const e=c??h;return m({value:e,tabValues:s})?e:null})();(0,i.A)((()=>{g&&o(g)}),[g]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),b(e)}),[u,b,s]),tabValues:s}}var b=t(2303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=t(4848);function y(e){let{className:n,block:t,selectedValue:r,selectValue:l,tabValues:i}=e;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.a_)(),d=e=>{const n=e.currentTarget,t=o.indexOf(n),a=i[t].value;a!==r&&(c(n),l(a))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},n),children:i.map((e=>{let{value:n,label:t,attributes:s}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>o.push(e),onKeyDown:u,onClick:d,...s,className:(0,a.A)("tabs__item",g.tabItem,s?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function v(e){let{lazy:n,children:t,selectedValue:a}=e;const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function _(e){const n=h(e);return(0,x.jsxs)("div",{className:(0,a.A)("tabs-container",g.tabList),children:[(0,x.jsx)(y,{...e,...n}),(0,x.jsx)(v,{...e,...n})]})}function j(e){const n=(0,b.A)();return(0,x.jsx)(_,{...e,children:u(e.children)},String(n))}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>i});var r=t(6540);const a={},s=r.createContext(a);function l(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);