"use strict";(self.webpackChunknewdocs=self.webpackChunknewdocs||[]).push([[5064],{5502:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>d,toc:()=>c});var r=t(4848),s=t(8453);const a={},o="Text vector search",d={id:"templates/text_vector_search",title:"Text vector search",description:"Get useful sample data",source:"@site/versioned_docs/version-0.4/templates/text_vector_search.md",sourceDirName:"templates",slug:"/templates/text_vector_search",permalink:"/docs/templates/text_vector_search",draft:!1,unlisted:!1,editUrl:"https://github.com/superduper-io/superduper/edit/main/docs/versioned_docs/version-0.4/templates/text_vector_search.md",tags:[],version:"0.4",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Simple retrieval augmented generation with OpenAI",permalink:"/docs/templates/simple_rag"},next:{title:"Transfer learning",permalink:"/docs/templates/transfer_learning"}},i={},c=[{value:"Get useful sample data",id:"get-useful-sample-data",level:2},{value:"Insert simple data",id:"insert-simple-data",level:2},{value:"Apply a chunker for search",id:"apply-a-chunker-for-search",level:2},{value:"Select outputs of upstream listener",id:"select-outputs-of-upstream-listener",level:2},{value:"Build text embedding model",id:"build-text-embedding-model",level:2},{value:"Create vector-index",id:"create-vector-index",level:2},{value:"Create template",id:"create-template",level:2}];function l(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"text-vector-search",children:"Text vector search"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"APPLY = False\nCOLLECTION_NAME = '<var:table_name>' if not APPLY else 'sample_text_vector_search'\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from superduper import superduper\n\ndb = superduper('mongomock:///test_db')\n"})}),"\n",(0,r.jsx)(n.h2,{id:"get-useful-sample-data",children:"Get useful sample data"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import json\nimport requests\nimport io\n\ndef getter():\n    response = requests.get('https://superduperdb-public-demo.s3.amazonaws.com/text.json')\n    return json.loads(response.content.decode('utf-8'))\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"if APPLY:\n    data = getter()\n"})}),"\n",(0,r.jsx)(n.h2,{id:"insert-simple-data",children:"Insert simple data"}),"\n",(0,r.jsx)(n.p,{children:"After turning on auto_schema, we can directly insert data, and superduper will automatically analyze the data type, and match the construction of the table and datatype."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"if APPLY:\n    from superduper import Document\n    ids = db.execute(db[COLLECTION_NAME].insert([Document(r) for r in data]))\n"})}),"\n",(0,r.jsx)(n.h2,{id:"apply-a-chunker-for-search",children:"Apply a chunker for search"}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Note that applying a chunker is ",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"not"})})," mandatory for search.\nIf your data is already chunked (e.g. short text snippets or audio) or if you\nare searching through something like images, which can't be chunked, then this\nwon't be necessary."]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from superduper import Model\n\nclass Chunker(Model):\n    chunk_size: int = 200\n    signature: str = 'singleton'\n\n    def predict(self, text):\n        text = text.split()\n        chunks = [' '.join(text[i:i + self.chunk_size]) for i in range(0, len(text), self.chunk_size)]\n        return chunks\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now we apply this chunker to the data by wrapping the chunker in ",(0,r.jsx)(n.code,{children:"Listener"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from superduper import Listener\n\nupstream_listener = Listener(\n    model=Chunker('chunk_model', chunk_size=200, example='test ' * 50),\n    select=db[COLLECTION_NAME].select(),\n    key='x',\n    identifier=f'chunker_{COLLECTION_NAME}',\n    flatten=True,\n)\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"if APPLY:\n    db.apply(upstream_listener, force=True)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"select-outputs-of-upstream-listener",children:"Select outputs of upstream listener"}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"This is useful if you have performed a first step, such as pre-computing\nfeatures, or chunking your data. You can use this query to\noperate on those outputs."})}),"\n",(0,r.jsx)(n.h2,{id:"build-text-embedding-model",children:"Build text embedding model"}),"\n",(0,r.jsx)(n.p,{children:"OpenAI:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from superduper.components.vector_index import sqlvector\nfrom superduper_openai import OpenAIEmbedding\n\nopenai_embedding = OpenAIEmbedding(identifier='text-embedding-ada-002', datatype=sqlvector(shape=(1536,)))\n"})}),"\n",(0,r.jsx)(n.p,{children:"Sentence-transformers"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from superduper.components.vector_index import sqlvector\nfrom superduper_sentence_transformers import SentenceTransformer\n\nsentence_transformers_embedding = SentenceTransformer(\n    identifier="sentence-transformers-embedding",\n    model="BAAI/bge-small-en",\n    datatype=sqlvector(shape=(1024,)),\n    postprocess=lambda x: x.tolist(),\n    predict_kwargs={"show_progress_bar": True},\n)\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from superduper.components.model import ModelRouter\n\nembedding_model = ModelRouter(\n    'embedding',\n    models={'openai': openai_embedding, 'sentence_transformers': sentence_transformers_embedding},\n    model='<var:embedding_model>' if not APPLY else 'openai',\n    example='this is a test',\n)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"create-vector-index",children:"Create vector-index"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from superduper import VectorIndex, Listener\n\nvector_index_name = f'vector-index-{COLLECTION_NAME}'\n\nvector_index = VectorIndex(\n    vector_index_name,\n    indexing_listener=Listener(\n        key=upstream_listener.outputs,\n        select=db[upstream_listener.outputs].select(),\n        model=embedding_model,\n        identifier=f'embedding-listener-{COLLECTION_NAME}',\n        upstream=[upstream_listener],\n    )\n)\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"if APPLY:\n    db.apply(vector_index, force=True)\n"})}),"\n",(0,r.jsx)(n.p,{children:"By applying the RAG model to the database, it will subsequently be accessible for use in other services."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from superduper import Application\n\napp = Application(\n    f'text-vector-search-app-{COLLECTION_NAME}',\n    components=[\n        upstream_listener,\n        vector_index,\n    ]\n)\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"if APPLY:\n    db.apply(app, force=True)\n"})}),"\n",(0,r.jsx)(n.p,{children:"You can now load the model elsewhere and make predictions using the following command."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"search_term = 'tell me about the use of pylance and vector-search'\n\nvector_search_query = db[f'_outputs__chunker_{COLLECTION_NAME}'].like(\n    {f'_outputs__chunker_{COLLECTION_NAME}': search_term},\n    n=10,\n    vector_index=vector_index_name,\n).select()\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"if APPLY:\n    vector_search_query.tolist()\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from superduper import QueryTemplate, CFG\n\nqt = QueryTemplate(\n    'vector_search',\n    template=vector_search_query,\n    substitutions={\n        COLLECTION_NAME: 'table_name',\n        search_term: 'search_term',\n        'mongodb': 'data_backend',\n    },\n    types={\n        'search_term': {\n            'type': 'str',\n            'default': 'enter your question here...',\n        },\n        'table_name': {\n            'type': 'str',\n            'default': 'sample_text_vector_search'\n        },\n        'data_backend': {\n            'type': 'mongodb',\n            'choices': ['mongodb', 'ibis'],\n            'default': 'mongodb'\n        }\n    }\n)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"create-template",children:"Create template"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from superduper import Template, CFG, Table, Schema\nfrom superduper.components.dataset import RemoteData\n\ntemplate = Template(\n    'text_vector_search',\n    template=app,\n    default_table=Table(\n        'sample_text_vector_search',\n        schema=Schema('sample_text_vector_search/schema', fields={'x': 'str'}),\n        data=RemoteData(\n            'superduper-docs',\n            getter=getter,\n        )\n    ),\n    queries=[qt],\n    substitutions={COLLECTION_NAME: 'table_name', 'mongodb': 'data_backend'},\n    template_variables=['embedding_model', 'table_name', 'data_backend'],\n    types={\n        'embedding_model': {\n            'type': 'str',\n            'choices': ['openai', 'sentence_transformers'],\n            'default': 'openai',\n        },\n        'table_name': {\n            'type': 'str',\n            'default': 'sample_text_vector_search'\n        },\n        'data_backend': {\n            'type': 'mongodb',\n            'choices': ['mongodb', 'ibis'],\n            'default': 'mongodb'\n        }\n    }\n)\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"template.export('.')\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>d});var r=t(6540);const s={},a=r.createContext(s);function o(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);