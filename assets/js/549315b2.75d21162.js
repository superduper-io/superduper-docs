"use strict";(self.webpackChunknewdocs=self.webpackChunknewdocs||[]).push([[9590],{1807:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>o});var r=t(4848),a=t(8453);const s={},i="Transfer learning",l={id:"templates/transfer_learning",title:"Transfer learning",description:"Get useful sample data",source:"@site/versioned_docs/version-0.7/templates/transfer_learning.md",sourceDirName:"templates",slug:"/templates/transfer_learning",permalink:"/docs/templates/transfer_learning",draft:!1,unlisted:!1,editUrl:"https://github.com/superduper-io/superduper/edit/main/docs/versioned_docs/version-0.7/templates/transfer_learning.md",tags:[],version:"0.7",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Simple retrieval augmented generation with OpenAI",permalink:"/docs/templates/simple_rag"}},d={},o=[{value:"Get useful sample data",id:"get-useful-sample-data",level:2},{value:"Insert simple data",id:"insert-simple-data",level:2},{value:"Compute features",id:"compute-features",level:2},{value:"Build and train classifier",id:"build-and-train-classifier",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"transfer-learning",children:"Transfer learning"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"APPLY = True\nEAGER = False\nCOLLECTION_NAME = '<var:table_name>' if not APPLY else 'sample_transfer_learning'\nMODALITY = 'text'\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from superduper import superduper, CFG\n\ndb = superduper('mongomock://test_db')\n"})}),"\n",(0,r.jsx)(n.h2,{id:"get-useful-sample-data",children:"Get useful sample data"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def getter():\n    import json\n    import random\n    import subprocess\n\n    subprocess.run([\n        'curl', '-O', 'https://superduperdb-public-demo.s3.amazonaws.com/text_classification.json',\n    ])\n    with open(\"text_classification.json\", \"r\") as f:\n        data = json.load(f)\n    subprocess.run(['rm', 'text_classification.json'])\n    data = data[:200]\n    def fold(): return {True: 'valid', False: 'train'}[random.random() < 0.1]\n    data = [{**r, '_fold': fold()} for r in data]\n    return data\n"})}),"\n",(0,r.jsx)(n.p,{children:"After obtaining the data, we insert it into the database."}),"\n",(0,r.jsx)(n.h2,{id:"insert-simple-data",children:"Insert simple data"}),"\n",(0,r.jsx)(n.p,{children:"After turning on auto_schema, we can directly insert data, and superduper will automatically analyze the data type, and match the construction of the table and datatype."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"if APPLY:\n    data = getter()\n    from superduper import Table\n\n    db.apply(\n        Table(\n            COLLECTION_NAME,\n            fields={'x': 'str', 'y': 'int'},\n        ),\n        force=True,\n    )\n    \n    ids = db[COLLECTION_NAME].insert(data)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"compute-features",children:"Compute features"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import sentence_transformers\nfrom superduper import Listener\nfrom superduper_sentence_transformers import SentenceTransformer\n\n\nembedding = SentenceTransformer(\n    identifier=\"embedding\",\n    model='all-MiniLM-L6-v2',\n    postprocess=lambda x: x.tolist(),\n)\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"feature_extractor_listener = Listener(\n    model=embedding,\n    select=db[COLLECTION_NAME],\n    key='x',\n    identifier=\"features\"\n)\n\n\nif APPLY and EAGER:\n    feature_extractor_listener = db.apply(\n        feature_extractor_listener,\n        force=True,\n    )\n"})}),"\n",(0,r.jsx)(n.h2,{id:"build-and-train-classifier",children:"Build and train classifier"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from superduper_sklearn import Estimator, SklearnTrainer\nfrom sklearn.svm import SVC\n\n\nscikit_model = Estimator(\n    identifier="my-model-scikit",\n    object=SVC(),\n    trainer=SklearnTrainer(\n        "my-scikit-trainer",\n        key=(feature_extractor_listener.outputs, "y"),\n        select=db[COLLECTION_NAME].outputs(feature_extractor_listener.predict_id),\n    ),\n    upstream=[feature_extractor_listener],\n)\n'})}),"\n",(0,r.jsx)(n.p,{children:"Define a validation for evaluating the effect after training."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from superduper import Dataset, Metric, Validation\n\ndef acc(x, y):\n    return sum([xx == yy for xx, yy in zip(x, y)]) / len(x)\n\naccuracy = Metric(identifier="acc", object=acc)\n\nt = db[COLLECTION_NAME]\nselect = t.filter(t[\'_fold\'] == \'valid\').outputs(feature_extractor_listener.predict_id)\n\nvalidation = Validation(\n    "transfer_learning_performance",\n    key=(feature_extractor_listener.outputs, "y"),\n    datasets=[\n        Dataset(\n            identifier="my-valid",\n            select=select,\n        )\n    ],\n    metrics=[accuracy],\n)\nscikit_model.validation = validation\n'})}),"\n",(0,r.jsx)(n.p,{children:"If we execute the apply function, then the model will be added to the database, and because the model has a Trainer, it will perform training."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"if APPLY and EAGER:\n    db.apply(scikit_model, force=True)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Get the training metrics"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from superduper import Application\n\napplication = Application(\n    identifier='transfer-learning',\n    components=[feature_extractor_listener, scikit_model],\n)\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"if APPLY:\n    db.apply(application)\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"if APPLY:\n    model = db.load('Estimator', 'my-model-scikit')\n    print(model.metric_values)\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from superduper import Template, Table, Schema\nfrom superduper.components.dataset import RemoteData\n\nt = Template(\n    'transfer_learning',\n    default_tables=[Table(\n        'sample_transfer_learning',\n        fields={'x': 'str', 'y': 'int'},\n        data=RemoteData(\n            'text_classification',\n            getter=getter,\n        ),\n    )],\n    template=application,\n    substitutions={'docs': 'table_name', 'text': 'modality'},\n    template_variables=['table_name', 'framework', 'modality'],\n    types={\n        'table_name': {\n            'type': 'str',\n            'default': 'sample_transfer_learning',\n        },\n        'modality': {\n            'type': 'str',\n            'default': 'text',\n        },\n        'framework': {\n            'type': 'str',\n            'default': 'scikit-framework',\n        },\n    },\n    db=db\n)\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"t.export('.')\n"})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var r=t(6540);const a={},s=r.createContext(a);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);