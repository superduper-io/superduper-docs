"use strict";(self.webpackChunknewdocs=self.webpackChunknewdocs||[]).push([[335],{6810:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var s=t(4848),o=t(8453);const i={},r="Create custom Component implementations",a={id:"customize/component",title:"Create custom Component implementations",description:"The Component base class enforces that all descendants are Python dataclass instances.",source:"@site/versioned_docs/version-0.7/customize/component.md",sourceDirName:"customize",slug:"/customize/component",permalink:"/docs/customize/component",draft:!1,unlisted:!1,editUrl:"https://github.com/superduper-io/superduper/edit/main/docs/versioned_docs/version-0.7/customize/component.md",tags:[],version:"0.7",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Building custom AI with Superduper",permalink:"/docs/customize/overview"},next:{title:"Bring your own models",permalink:"/docs/customize/model"}},c={},d=[];function l(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"create-custom-component-implementations",children:["Create custom ",(0,s.jsx)(n.code,{children:"Component"})," implementations"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Component"})," base class enforces that all descendants are Python ",(0,s.jsx)(n.code,{children:"dataclass"})," instances.\nThat means that users only need to annotate inputs to their ",(0,s.jsx)(n.code,{children:"Component"}),", and don't need to write\n",(0,s.jsx)(n.code,{children:"__init__"})," boilerplate. In addition to this, any parameter to a ",(0,s.jsx)(n.code,{children:"Component"})," is serialized when\n",(0,s.jsx)(n.code,{children:"Component.encode()"})," is called. Superduper tries to serialize everything as JSON, apart from parameters which are not easily convertable to and from JSON, for instance functions, classes, and data blobs, such as model weights and tensors; these items are serialized using Python serialization. The serialized component is saved in the Superduper connection ",(0,s.jsx)(n.code,{children:"db"})," (metadata goes to ",(0,s.jsx)(n.code,{children:"db.metadata"})," and blobs to ",(0,s.jsx)(n.code,{children:"db.artifact_store"}),")."]}),"\n",(0,s.jsxs)(n.p,{children:["In order to implement what happens when ",(0,s.jsx)(n.code,{children:"db.apply(my_component)"})," is called, developers should decorate methods\nwith ",(0,s.jsx)(n.code,{children:"@trigger('apply')"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["To illustrate this, here is an example of a custom component with a custom trigger, which sends a notification\nwhen applied with ",(0,s.jsx)(n.code,{children:"db.apply"})," and then executes a function passed to the class ",(0,s.jsx)(n.code,{children:".d"}),". The second trigger\n",(0,s.jsx)(n.code,{children:".go"})," waits for ",(0,s.jsx)(n.code,{children:"start"})," to complete (via ",(0,s.jsx)(n.code,{children:"depends_on"}),") and only runs (via ",(0,s.jsx)(n.code,{children:"requires"}),") if the parameter ",(0,s.jsx)(n.code,{children:"d"})," is specified."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import typing as t\n\n\nclass MyComponent(Component):\n    a: int\n    b: str\n    c: t.Dict\n    d: t.Callable | None = None\n\n    # This is called directly after `MyComponent.__init__`\n    def postinit(self):\n        assert {'a', 'b', 'c'}.issubset(set(inspect.signature(self.d).parameters.keys()))\n\n    # This is called before any `@trigger` if not already called\n    def setup(self):\n        self.client = slack.connect(os.environ[...])\n\n    # This is called just after `MyComponent` is saved to the `db.databackend`.\n    def on_create(self):\n        self.setup()\n        self.client.register(self.identifier)\n\n    # This is called when `MyComponent` is removed using `db.remove`\n    def cleanup(self):\n        self.client.teardown(self.identifier)\n\n    # Methods with @trigger run as jobs\n    @trigger('apply')\n    def start(self):\n        self.client.send_message(f'initializing {self.huuid}')\n\n    # An order of execution can be set with `depends_on`\n    # The job can depend on optional parameter being specified with `requires`\n    @trigger('apply', depends_on='start', requires='d')\n    def go(self):\n        self.d(a=self.a, b=self.b, c=self.c)\n"})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(6540);const o={},i=s.createContext(o);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);