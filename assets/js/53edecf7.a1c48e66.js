"use strict";(self.webpackChunknewdocs=self.webpackChunknewdocs||[]).push([[3673],{1051:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>t,default:()=>p,frontMatter:()=>c,metadata:()=>i,toc:()=>o});var a=s(4848),d=s(8453);const c={},t="Schema",i={id:"apply_api/schema",title:"Schema",description:"- Apply a dictionary of FieldType and DataType to encode columnar data",source:"@site/content/apply_api/schema.md",sourceDirName:"apply_api",slug:"/apply_api/schema",permalink:"/superduper-docs/docs/apply_api/schema",draft:!1,unlisted:!1,editUrl:"https://github.com/superduper-io/superduper/edit/main/docs/content/apply_api/schema.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"DataType",permalink:"/superduper-docs/docs/apply_api/datatype"},next:{title:"Table",permalink:"/superduper-docs/docs/apply_api/table"}},r={},o=[];function l(e){const n={a:"a",code:"code",em:"em",h1:"h1",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,d.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"schema",children:(0,a.jsx)(n.code,{children:"Schema"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Apply a dictionary of ",(0,a.jsx)(n.code,{children:"FieldType"})," and ",(0,a.jsx)(n.code,{children:"DataType"})," to encode columnar data"]}),"\n",(0,a.jsx)(n.li,{children:"Mostly relevant to SQL databases, but can also be used with MongoDB"}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"Schema"})," leverages encoding functionality of contained ",(0,a.jsx)(n.code,{children:"DataType"})," instances"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:(0,a.jsx)(n.strong,{children:"Dependencies"})})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/superduper-docs/docs/apply_api/datatype",children:(0,a.jsx)(n.code,{children:"DataType"})})}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:(0,a.jsx)(n.strong,{children:"Usage pattern"})})}),"\n",(0,a.jsxs)(n.p,{children:["(Learn how to build a ",(0,a.jsx)(n.code,{children:"DataType"})," ",(0,a.jsx)(n.a,{href:"datatype",children:"here"}),")"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Vanilla usage"})}),"\n",(0,a.jsx)(n.p,{children:"Table can potentially include\nmore columns which don't need encoding:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"from superduper import Schema\n\nschema = Schema(\n    'my-schema',\n    fields={\n        'img': dt_1,   # A `DataType`\n        'video': dt_2,   # Another `DataType`\n    }\n)\n\ndb.apply(schema)\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Usage with SQL"})}),"\n",(0,a.jsxs)(n.p,{children:["All columns should be flagged with either ",(0,a.jsx)(n.code,{children:"DataType"})," or ",(0,a.jsx)(n.code,{children:"dtype"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"from superduper.backends.ibis import dtype\n\nschema = Schema(\n    'my-schema',\n    fields={\n        'img': dt_1,   # A `DataType`\n        'video': dt_2,   # Another `DataType`\n        'txt', dtype('str'),\n        'numer', dtype('int'),\n    }\n)\n\ndb.apply(schema)\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Usage with MongoDB"})}),"\n",(0,a.jsxs)(n.p,{children:["In MongoDB, the non-",(0,a.jsx)(n.code,{children:"DataType"})," columns/ fields can be omitted:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"schema = Schema(\n    'my-schema',\n    fields={\n        'img': dt_1,   # A `DataType`\n        'video': dt_2,   # Another `DataType`\n    }\n)\n\ndb.apply(schema)\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsxs)(n.em,{children:["Usage with ",(0,a.jsx)(n.code,{children:"Model"})," descendants (MongoDB only)"]})}),"\n",(0,a.jsxs)(n.p,{children:["If used together with ",(0,a.jsx)(n.code,{children:"Model"}),", the model is assumed to emit ",(0,a.jsx)(n.code,{children:"tuple"})," outputs, and these\nneed differential encoding. The ",(0,a.jsx)(n.code,{children:"Schema"})," is applied to the columns of output,\nto get something which can be saved in the ",(0,a.jsx)(n.code,{children:"db.databackend"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"from superduper import ObjectModel\n\nm = Model(\n    'my-model',\n    object=my_object,\n    output_schema=schema\n)\n\ndb.apply(m)    # adds model and schema\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:(0,a.jsx)(n.strong,{children:"See also"})})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"../cluster_mode/change_data_capture",children:"Change-data capture"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>i});var a=s(6540);const d={},c=a.createContext(d);function t(e){const n=a.useContext(c);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:t(e.components),a.createElement(c.Provider,{value:n},e.children)}}}]);