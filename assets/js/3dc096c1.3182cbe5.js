"use strict";(self.webpackChunknewdocs=self.webpackChunknewdocs||[]).push([[3890],{5872:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var s=n(4848),o=n(8453);const r={},i="Custom serialization",a={id:"tutorials/custom_serialization",title:"Custom serialization",description:"In this tutorial, we demonstrate how developers can flexibily and portably define",source:"@site/docs/tutorials/custom_serialization.md",sourceDirName:"tutorials",slug:"/tutorials/custom_serialization",permalink:"/docs/next/tutorials/custom_serialization",draft:!1,unlisted:!1,editUrl:"https://github.com/superduper-io/superduper/edit/main/docs/docs/tutorials/custom_serialization.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Training and Managing MNIST Predictions with superduper",permalink:"/docs/next/tutorials/training"},next:{title:"Reusable Superduper applications and templates",permalink:"/docs/next/tutorials/application_template"}},l={},c=[];function d(e){const t={code:"code",h1:"h1",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"custom-serialization",children:"Custom serialization"}),"\n",(0,s.jsxs)(t.p,{children:["In this tutorial, we demonstrate how developers can flexibily and portably define\ntheir own classes in Superduper. These may be exported with ",(0,s.jsx)(t.code,{children:"Component.export"}),"\nand transported to other Superduper deployments with ",(0,s.jsx)(t.code,{children:"db.apply"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"To make our lives difficult, we'll include a data blob in the model, which should be serialized with the\nexported class:"}),"\n",(0,s.jsxs)(t.p,{children:["We'll define our own ",(0,s.jsx)(t.code,{children:"Model"})," descendant, with a custom ",(0,s.jsx)(t.code,{children:".predict"})," method.\nWe are free to define any of our own parameters to this class with a simple annotation in the header, since ",(0,s.jsx)(t.code,{children:"Model"}),"\nis a ",(0,s.jsx)(t.code,{children:"dataclasses.dataclass"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"from superduper import *\nimport typing as t\n\n\nclass NewModel(Model):\n    a: int = 2\n    b: t.Any\n\n    def predict(self, x):\n        return x * self.a\n"})}),"\n",(0,s.jsxs)(t.p,{children:["If we want ",(0,s.jsx)(t.code,{children:"b"})," to be saved as a blob in the ",(0,s.jsx)(t.code,{children:"db.artifact_store"})," we can simply\nannotate this in the ",(0,s.jsx)(t.code,{children:"artifacts=..."})," parameter, supplying the serializer we would like to use:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"m = NewModel('test-hg', a=2, b=data)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Now we can export the model:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"m.export('test-hg')\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"!cat test-hg/component.json\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"!ls test-hg/blobs/\n"})}),"\n",(0,s.jsx)(t.p,{children:"The following cell works even after restarting the kernel.\nThat means the exported component is now completely portable!"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"from superduper import *\n\nc = Component.read('test-hg')\n\nc.predict(2)\n"})})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var s=n(6540);const o={},r=s.createContext(o);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);