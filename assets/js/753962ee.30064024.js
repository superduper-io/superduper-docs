"use strict";(self.webpackChunknewdocs=self.webpackChunknewdocs||[]).push([[785],{4858:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>c});var s=n(4848),a=n(8453);const d={},r=void 0,i={id:"api/components/dataset",title:"dataset",description:"superduper.components.dataset",source:"@site/docs/api/components/dataset.md",sourceDirName:"api/components",slug:"/api/components/dataset",permalink:"/docs/api/components/dataset",draft:!1,unlisted:!1,editUrl:"https://github.com/superduper-io/superduper/edit/main/docs/docs/api/components/dataset.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"component",permalink:"/docs/api/components/component"},next:{title:"datatype",permalink:"/docs/api/components/datatype"}},o={},c=[{value:"<code>Dataset</code>",id:"dataset",level:2},{value:"<code>DataInit</code>",id:"datainit",level:2}];function l(t){const e={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.R)(),...t.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.code,{children:"superduper.components.dataset"})})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.a,{href:"https://github.com/superduper/superduper/blob/main/superduper.components/dataset.py",children:"Source code"})}),"\n",(0,s.jsx)(e.h2,{id:"dataset",children:(0,s.jsx)(e.code,{children:"Dataset"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"Dataset(self,\n     identifier: str,\n     db: dataclasses.InitVar[typing.Optional[ForwardRef('Datalayer')]] = None,\n     uuid: None = None,\n     *,\n     upstream: \"t.Optional[t.List['Component']]\" = None,\n     artifacts: 'dc.InitVar[t.Optional[t.Dict]]' = None,\n     select: 't.Optional[Query]' = None,\n     sample_size: 't.Optional[int]' = None,\n     random_seed: 't.Optional[int]' = None,\n     creation_date: 't.Optional[str]' = None,\n     raw_data: 't.Optional[t.Sequence[t.Any]]' = None,\n     pin: 'bool' = False) -> None\n"})}),"\n",(0,s.jsxs)(e.table,{children:[(0,s.jsx)(e.thead,{children:(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.th,{children:"Parameter"}),(0,s.jsx)(e.th,{children:"Description"})]})}),(0,s.jsxs)(e.tbody,{children:[(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"identifier"}),(0,s.jsx)(e.td,{children:"Identifier of the leaf."})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"db"}),(0,s.jsx)(e.td,{children:"Datalayer instance."})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"uuid"}),(0,s.jsx)(e.td,{children:"UUID of the leaf."})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"artifacts"}),(0,s.jsxs)(e.td,{children:["A dictionary of artifacts paths and ",(0,s.jsx)(e.code,{children:"DataType"})," objects"]})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"select"}),(0,s.jsx)(e.td,{children:"A query to select the documents for the dataset."})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"sample_size"}),(0,s.jsx)(e.td,{children:"The number of documents to sample from the query."})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"random_seed"}),(0,s.jsx)(e.td,{children:"The random seed to use for sampling."})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"creation_date"}),(0,s.jsx)(e.td,{children:"The date the dataset was created."})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"raw_data"}),(0,s.jsx)(e.td,{children:"The raw data for the dataset."})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"pin"}),(0,s.jsx)(e.td,{children:"Whether to pin the dataset. If True, the dataset will load the datas from the database every time. If False, the dataset will cache the datas after we apply to db."})]})]})]}),"\n",(0,s.jsx)(e.p,{children:"A dataset is an immutable collection of documents."}),"\n",(0,s.jsx)(e.h2,{id:"datainit",children:(0,s.jsx)(e.code,{children:"DataInit"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"DataInit(self,\n     identifier: str,\n     db: dataclasses.InitVar[typing.Optional[ForwardRef('Datalayer')]] = None,\n     uuid: None = None,\n     *,\n     upstream: \"t.Optional[t.List['Component']]\" = None,\n     artifacts: 'dc.InitVar[t.Optional[t.Dict]]' = None,\n     data: 't.List[t.Dict]',\n     table: 'str') -> None\n"})}),"\n",(0,s.jsxs)(e.table,{children:[(0,s.jsx)(e.thead,{children:(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.th,{children:"Parameter"}),(0,s.jsx)(e.th,{children:"Description"})]})}),(0,s.jsxs)(e.tbody,{children:[(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"identifier"}),(0,s.jsx)(e.td,{children:"Identifier of the leaf."})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"db"}),(0,s.jsx)(e.td,{children:"Datalayer instance."})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"uuid"}),(0,s.jsx)(e.td,{children:"UUID of the leaf."})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"artifacts"}),(0,s.jsxs)(e.td,{children:["A dictionary of artifacts paths and ",(0,s.jsx)(e.code,{children:"DataType"})," objects"]})]})]})]}),"\n",(0,s.jsx)(e.p,{children:"DataInit(identifier: str, db: dataclasses.InitVar[typing.Optional[ForwardRef('Datalayer')]] = None, uuid: None = None, *, upstream: \"t.Optional[t.List['Component']]\" = None, artifacts: 'dc.InitVar[t.Optional[t.Dict]]' = None, data: 't.List[t.Dict]', table: 'str')"})]})}function h(t={}){const{wrapper:e}={...(0,a.R)(),...t.components};return e?(0,s.jsx)(e,{...t,children:(0,s.jsx)(l,{...t})}):l(t)}},8453:(t,e,n)=>{n.d(e,{R:()=>r,x:()=>i});var s=n(6540);const a={},d=s.createContext(a);function r(t){const e=s.useContext(d);return s.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function i(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:r(t.components),s.createElement(d.Provider,{value:e},t.children)}}}]);